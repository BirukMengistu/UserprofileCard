{"version":3,"sources":["components/card/card.jsx","components/card-list/cardlist.jsx","searchbox/search-box.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","pro","id","name","email","CardList","prof","map","key","SearchBox","placeholder","onSearchChange","typeof","onChange","App","event","setState","searchField","target","value","state","fetch","then","response","json","users","this","filterProfile","filter","userPro","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"6UAEaA,G,YAAO,SAAAC,GAAK,OACrB,yBAAKC,UAAU,kBACd,yBAAKC,IAAM,gBAAgBC,IAAG,+BAA0BH,EAAMI,IAAIC,GAApC,4BAC9B,gCAAML,EAAMI,IAAIE,MAChB,gCAAMN,EAAMI,IAAIG,UCHRC,EAAW,SAAAR,GAGlB,OACE,yBAAKC,UAAU,aACZD,EAAMS,KAAKC,KAAI,SAAAN,GAAG,OAAK,kBAAC,EAAD,CAAMO,IAAOP,EAAIC,GAAID,IAAMA,OADrD,MCLKQ,G,KAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAcC,EAAhB,EAAgBA,eAAhB,OACrB,6BACA,2BAAQb,UAAW,SAASc,OAAO,SACnCF,YAAaA,EACbG,SAAUF,OCkCCG,G,wDAjCb,aAAc,IAAD,8BACX,gBAMFH,eAAgB,SAACI,GACf,EAAKC,SAAS,CAACC,YAAYF,EAAMG,OAAOC,SANxC,EAAKC,MAAQ,CACbd,KAAM,GACNW,YAAY,IAJD,E,gEAUO,IAAD,OACjBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UACxBF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACV,KAAKmB,S,+BAG5B,IAAD,EACqBC,KAAKN,MAAzBd,EADD,EACCA,KAAKW,EADN,EACMA,YACNU,EAAgBrB,EAAKsB,QAAQ,SAAAC,GAAO,OACxCA,EAAQ1B,KAAK2B,cACZC,SAASd,EAAYa,kBACxB,OACE,yBAAKhC,UAAU,OACN,6CACA,kBAAC,EAAD,CAAWY,YAAY,iBACvBC,eAAgBe,KAAKf,iBACrB,kBAAC,EAAD,CAAUL,KAAQqB,S,GA3BfK,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.8f9b06ad.chunk.js","sourcesContent":["import React from 'react';\nimport './card-style.css';\nexport const Card = props =>(\n    <div className='card-container'>\n     <img alt = \"Profile-card \" src={`https://robohash.org/${props.pro.id}?set=set2&size=180x180`}/>\n     <h2> {props.pro.name}</h2>\n     <h2> {props.pro.email}</h2>\n    </div>\n    \n);","import React from 'react';\nimport './cardlist.css'\nimport {Card} from '../card/card';\nexport const CardList = props =>\n{  \n     \n      return (\n        <div className='card-list'>\n          {props.prof.map(pro => (<Card key = {pro.id} pro ={pro}/> ))};   \n       </div>);\n};\n\n\n\n","import React from 'react';\nimport './search-box-style.css';\nexport const SearchBox = ({placeholder , onSearchChange})=>(\n    <div >\n    <input  className ='search' typeof='search'  \n    placeholder={placeholder} \n    onChange={onSearchChange}/> \n    </div>\n    \n);","import React,{Component} from 'react';\nimport {CardList} from './components/card-list/cardlist';\nimport {SearchBox} from './searchbox/search-box';\nimport './searchbox/search-box-style.css';\nimport './App.css';\n\nclass App extends Component {\n  constructor(){\n    super()\n    this.state=  {\n    prof: [ ],\n    searchField:''\n    };\n  }\n  onSearchChange =(event) =>{\n    this.setState({searchField:event.target.value})\n  }\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response=>response.json())\n    .then(users => this.setState({prof:users}));\n  }\n\n  render(){\n    const {prof,searchField} = this.state;\n    const filterProfile = prof.filter( userPro => \n      userPro.name.toLowerCase()\n      .includes(searchField.toLowerCase()) );\n    return (\n      <div className=\"App\">\n               <h1>Users profile</h1>\n               <SearchBox placeholder='Search profile'\n               onSearchChange={this.onSearchChange} />\n               <CardList prof = {filterProfile}/>      \n      </div>\n    );\n  }\n  \n\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}